#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.42000
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WindowsFormsApp1
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Items")]
	public partial class EquipmentDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertItems(Items instance);
    partial void UpdateItems(Items instance);
    partial void DeleteItems(Items instance);
    partial void InsertEffects(Effects instance);
    partial void UpdateEffects(Effects instance);
    partial void DeleteEffects(Effects instance);
    partial void InsertType_Of_Attack(Type_Of_Attack instance);
    partial void UpdateType_Of_Attack(Type_Of_Attack instance);
    partial void DeleteType_Of_Attack(Type_Of_Attack instance);
    partial void InsertWeapon_Effects(Weapon_Effects instance);
    partial void UpdateWeapon_Effects(Weapon_Effects instance);
    partial void DeleteWeapon_Effects(Weapon_Effects instance);
    #endregion
		
		public EquipmentDataContext() : 
				base(global::WindowsFormsApp1.Properties.Settings.Default.EquipmentConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public EquipmentDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EquipmentDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EquipmentDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EquipmentDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Items> Items
		{
			get
			{
				return this.GetTable<Items>();
			}
		}
		
		public System.Data.Linq.Table<Effects> Effects
		{
			get
			{
				return this.GetTable<Effects>();
			}
		}
		
		public System.Data.Linq.Table<Type_Of_Attack> Type_Of_Attack
		{
			get
			{
				return this.GetTable<Type_Of_Attack>();
			}
		}
		
		public System.Data.Linq.Table<Weapon_Effects> Weapon_Effects
		{
			get
			{
				return this.GetTable<Weapon_Effects>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Items")]
	public partial class Items : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.Nullable<int> _Damage;
		
		private char _Type_Of_Action;
		
		private System.Nullable<int> _Main_Target_Proc_Chance;
		
		private System.Nullable<int> _Other_Targets_Proc_Chance;
		
		private System.Nullable<int> _Amount_Of_Jumps;
		
		private System.Nullable<int> _Damage_After_Jump;
		
		private EntitySet<Type_Of_Attack> _Type_Of_Attack;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDamageChanging(System.Nullable<int> value);
    partial void OnDamageChanged();
    partial void OnType_Of_ActionChanging(char value);
    partial void OnType_Of_ActionChanged();
    partial void OnMain_Target_Proc_ChanceChanging(System.Nullable<int> value);
    partial void OnMain_Target_Proc_ChanceChanged();
    partial void OnOther_Targets_Proc_ChanceChanging(System.Nullable<int> value);
    partial void OnOther_Targets_Proc_ChanceChanged();
    partial void OnAmount_Of_JumpsChanging(System.Nullable<int> value);
    partial void OnAmount_Of_JumpsChanged();
    partial void OnDamage_After_JumpChanging(System.Nullable<int> value);
    partial void OnDamage_After_JumpChanged();
    #endregion
		
		public Items()
		{
			this._Type_Of_Attack = new EntitySet<Type_Of_Attack>(new Action<Type_Of_Attack>(this.attach_Type_Of_Attack), new Action<Type_Of_Attack>(this.detach_Type_Of_Attack));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Damage", DbType="Int")]
		public System.Nullable<int> Damage
		{
			get
			{
				return this._Damage;
			}
			set
			{
				if ((this._Damage != value))
				{
					this.OnDamageChanging(value);
					this.SendPropertyChanging();
					this._Damage = value;
					this.SendPropertyChanged("Damage");
					this.OnDamageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type_Of_Action", DbType="Char(1) NOT NULL")]
		public char Type_Of_Action
		{
			get
			{
				return this._Type_Of_Action;
			}
			set
			{
				if ((this._Type_Of_Action != value))
				{
					this.OnType_Of_ActionChanging(value);
					this.SendPropertyChanging();
					this._Type_Of_Action = value;
					this.SendPropertyChanged("Type_Of_Action");
					this.OnType_Of_ActionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Main_Target_Proc_Chance", DbType="Int")]
		public System.Nullable<int> Main_Target_Proc_Chance
		{
			get
			{
				return this._Main_Target_Proc_Chance;
			}
			set
			{
				if ((this._Main_Target_Proc_Chance != value))
				{
					this.OnMain_Target_Proc_ChanceChanging(value);
					this.SendPropertyChanging();
					this._Main_Target_Proc_Chance = value;
					this.SendPropertyChanged("Main_Target_Proc_Chance");
					this.OnMain_Target_Proc_ChanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Other_Targets_Proc_Chance", DbType="Int")]
		public System.Nullable<int> Other_Targets_Proc_Chance
		{
			get
			{
				return this._Other_Targets_Proc_Chance;
			}
			set
			{
				if ((this._Other_Targets_Proc_Chance != value))
				{
					this.OnOther_Targets_Proc_ChanceChanging(value);
					this.SendPropertyChanging();
					this._Other_Targets_Proc_Chance = value;
					this.SendPropertyChanged("Other_Targets_Proc_Chance");
					this.OnOther_Targets_Proc_ChanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount_Of_Jumps", DbType="Int")]
		public System.Nullable<int> Amount_Of_Jumps
		{
			get
			{
				return this._Amount_Of_Jumps;
			}
			set
			{
				if ((this._Amount_Of_Jumps != value))
				{
					this.OnAmount_Of_JumpsChanging(value);
					this.SendPropertyChanging();
					this._Amount_Of_Jumps = value;
					this.SendPropertyChanged("Amount_Of_Jumps");
					this.OnAmount_Of_JumpsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Damage_After_Jump", DbType="Int")]
		public System.Nullable<int> Damage_After_Jump
		{
			get
			{
				return this._Damage_After_Jump;
			}
			set
			{
				if ((this._Damage_After_Jump != value))
				{
					this.OnDamage_After_JumpChanging(value);
					this.SendPropertyChanging();
					this._Damage_After_Jump = value;
					this.SendPropertyChanged("Damage_After_Jump");
					this.OnDamage_After_JumpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Items_Type_Of_Attack", Storage="_Type_Of_Attack", ThisKey="Id", OtherKey="Item_Id")]
		public EntitySet<Type_Of_Attack> Type_Of_Attack
		{
			get
			{
				return this._Type_Of_Attack;
			}
			set
			{
				this._Type_Of_Attack.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Type_Of_Attack(Type_Of_Attack entity)
		{
			this.SendPropertyChanging();
			entity.Items = this;
		}
		
		private void detach_Type_Of_Attack(Type_Of_Attack entity)
		{
			this.SendPropertyChanging();
			entity.Items = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Effects")]
	public partial class Effects : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Weapon_Effects> _Weapon_Effects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Effects()
		{
			this._Weapon_Effects = new EntitySet<Weapon_Effects>(new Action<Weapon_Effects>(this.attach_Weapon_Effects), new Action<Weapon_Effects>(this.detach_Weapon_Effects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Effects_Weapon_Effects", Storage="_Weapon_Effects", ThisKey="Id", OtherKey="Effect_Id")]
		public EntitySet<Weapon_Effects> Weapon_Effects
		{
			get
			{
				return this._Weapon_Effects;
			}
			set
			{
				this._Weapon_Effects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Weapon_Effects(Weapon_Effects entity)
		{
			this.SendPropertyChanging();
			entity.Effects = this;
		}
		
		private void detach_Weapon_Effects(Weapon_Effects entity)
		{
			this.SendPropertyChanging();
			entity.Effects = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Type_Of_Attack")]
	public partial class Type_Of_Attack : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Id_Ability;
		
		private int _Item_Id;
		
		private char _Item_Type;
		
		private EntityRef<Items> _Items;
		
		private EntityRef<Weapon_Effects> _Weapon_Effects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnId_AbilityChanging(int value);
    partial void OnId_AbilityChanged();
    partial void OnItem_IdChanging(int value);
    partial void OnItem_IdChanged();
    partial void OnItem_TypeChanging(char value);
    partial void OnItem_TypeChanged();
    #endregion
		
		public Type_Of_Attack()
		{
			this._Items = default(EntityRef<Items>);
			this._Weapon_Effects = default(EntityRef<Weapon_Effects>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Ability", DbType="Int NOT NULL")]
		public int Id_Ability
		{
			get
			{
				return this._Id_Ability;
			}
			set
			{
				if ((this._Id_Ability != value))
				{
					if (this._Weapon_Effects.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_AbilityChanging(value);
					this.SendPropertyChanging();
					this._Id_Ability = value;
					this.SendPropertyChanged("Id_Ability");
					this.OnId_AbilityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Item_Id", DbType="Int NOT NULL")]
		public int Item_Id
		{
			get
			{
				return this._Item_Id;
			}
			set
			{
				if ((this._Item_Id != value))
				{
					if (this._Items.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItem_IdChanging(value);
					this.SendPropertyChanging();
					this._Item_Id = value;
					this.SendPropertyChanged("Item_Id");
					this.OnItem_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Item_Type", DbType="Char(1) NOT NULL")]
		public char Item_Type
		{
			get
			{
				return this._Item_Type;
			}
			set
			{
				if ((this._Item_Type != value))
				{
					this.OnItem_TypeChanging(value);
					this.SendPropertyChanging();
					this._Item_Type = value;
					this.SendPropertyChanged("Item_Type");
					this.OnItem_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Items_Type_Of_Attack", Storage="_Items", ThisKey="Item_Id", OtherKey="Id", IsForeignKey=true)]
		public Items Items
		{
			get
			{
				return this._Items.Entity;
			}
			set
			{
				Items previousValue = this._Items.Entity;
				if (((previousValue != value) 
							|| (this._Items.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Items.Entity = null;
						previousValue.Type_Of_Attack.Remove(this);
					}
					this._Items.Entity = value;
					if ((value != null))
					{
						value.Type_Of_Attack.Add(this);
						this._Item_Id = value.Id;
					}
					else
					{
						this._Item_Id = default(int);
					}
					this.SendPropertyChanged("Items");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Weapon_Effects_Type_Of_Attack", Storage="_Weapon_Effects", ThisKey="Id_Ability", OtherKey="Id_Ability", IsForeignKey=true)]
		public Weapon_Effects Weapon_Effects
		{
			get
			{
				return this._Weapon_Effects.Entity;
			}
			set
			{
				Weapon_Effects previousValue = this._Weapon_Effects.Entity;
				if (((previousValue != value) 
							|| (this._Weapon_Effects.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Weapon_Effects.Entity = null;
						previousValue.Type_Of_Attack.Remove(this);
					}
					this._Weapon_Effects.Entity = value;
					if ((value != null))
					{
						value.Type_Of_Attack.Add(this);
						this._Id_Ability = value.Id_Ability;
					}
					else
					{
						this._Id_Ability = default(int);
					}
					this.SendPropertyChanged("Weapon_Effects");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Weapon_Effects")]
	public partial class Weapon_Effects : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_Ability;
		
		private int _Strength;
		
		private int _Duration;
		
		private int _Effect_Id;
		
		private EntitySet<Type_Of_Attack> _Type_Of_Attack;
		
		private EntityRef<Effects> _Effects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_AbilityChanging(int value);
    partial void OnId_AbilityChanged();
    partial void OnStrengthChanging(int value);
    partial void OnStrengthChanged();
    partial void OnDurationChanging(int value);
    partial void OnDurationChanged();
    partial void OnEffect_IdChanging(int value);
    partial void OnEffect_IdChanged();
    #endregion
		
		public Weapon_Effects()
		{
			this._Type_Of_Attack = new EntitySet<Type_Of_Attack>(new Action<Type_Of_Attack>(this.attach_Type_Of_Attack), new Action<Type_Of_Attack>(this.detach_Type_Of_Attack));
			this._Effects = default(EntityRef<Effects>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Ability", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id_Ability
		{
			get
			{
				return this._Id_Ability;
			}
			set
			{
				if ((this._Id_Ability != value))
				{
					this.OnId_AbilityChanging(value);
					this.SendPropertyChanging();
					this._Id_Ability = value;
					this.SendPropertyChanged("Id_Ability");
					this.OnId_AbilityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Strength", DbType="Int NOT NULL")]
		public int Strength
		{
			get
			{
				return this._Strength;
			}
			set
			{
				if ((this._Strength != value))
				{
					this.OnStrengthChanging(value);
					this.SendPropertyChanging();
					this._Strength = value;
					this.SendPropertyChanged("Strength");
					this.OnStrengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duration", DbType="Int NOT NULL")]
		public int Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Effect_Id", DbType="Int NOT NULL")]
		public int Effect_Id
		{
			get
			{
				return this._Effect_Id;
			}
			set
			{
				if ((this._Effect_Id != value))
				{
					if (this._Effects.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEffect_IdChanging(value);
					this.SendPropertyChanging();
					this._Effect_Id = value;
					this.SendPropertyChanged("Effect_Id");
					this.OnEffect_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Weapon_Effects_Type_Of_Attack", Storage="_Type_Of_Attack", ThisKey="Id_Ability", OtherKey="Id_Ability")]
		public EntitySet<Type_Of_Attack> Type_Of_Attack
		{
			get
			{
				return this._Type_Of_Attack;
			}
			set
			{
				this._Type_Of_Attack.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Effects_Weapon_Effects", Storage="_Effects", ThisKey="Effect_Id", OtherKey="Id", IsForeignKey=true)]
		public Effects Effects
		{
			get
			{
				return this._Effects.Entity;
			}
			set
			{
				Effects previousValue = this._Effects.Entity;
				if (((previousValue != value) 
							|| (this._Effects.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Effects.Entity = null;
						previousValue.Weapon_Effects.Remove(this);
					}
					this._Effects.Entity = value;
					if ((value != null))
					{
						value.Weapon_Effects.Add(this);
						this._Effect_Id = value.Id;
					}
					else
					{
						this._Effect_Id = default(int);
					}
					this.SendPropertyChanged("Effects");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Type_Of_Attack(Type_Of_Attack entity)
		{
			this.SendPropertyChanging();
			entity.Weapon_Effects = this;
		}
		
		private void detach_Type_Of_Attack(Type_Of_Attack entity)
		{
			this.SendPropertyChanging();
			entity.Weapon_Effects = null;
		}
	}
}
#pragma warning restore 1591
